/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package modular_stream;

import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.concurrent.Callable;
import javax.swing.JLabel;

/**
 *
 * @author Amir72c
 */
public class Showcase extends javax.swing.JPanel {

    StreamPanel CurrentCanvas;
    JLabel dragging_streamNode;//temp
    JLabel dragging_streamCanvas;//temp
    JLabel dragging_shadow;
    int namingNumber = 1;

    /**
     * Creates new form Showcase
     */
    public Showcase() {
        initComponents();
        Component[] all_dragables = this.getComponents();
        for (int i = 0; i < all_dragables.length; i++) {
            try {
                JLabel temp = (JLabel) all_dragables[i];
                register_dragable(temp);
            } catch (Exception ex) {
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        streamNodeDrag = new javax.swing.JLabel();
        streamCanvasDrag = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        streamNodeDrag.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/main_box.png"))); // NOI18N
        streamNodeDrag.setName("StreamNode"); // NOI18N
        streamNodeDrag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                streamNodeDragMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                streamNodeDragMouseReleased(evt);
            }
        });
        streamNodeDrag.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                streamNodeDragMouseDragged(evt);
            }
        });

        streamCanvasDrag.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/main_canvas.png"))); // NOI18N
        streamCanvasDrag.setName("StreamCanvas"); // NOI18N
        streamCanvasDrag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                streamCanvasDragMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                streamCanvasDragMouseReleased(evt);
            }
        });
        streamCanvasDrag.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                streamCanvasDragMouseDragged(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plot_histogram.png"))); // NOI18N
        jLabel1.setName("PlotHist"); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1MouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(streamNodeDrag)
                    .addComponent(streamCanvasDrag)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(streamNodeDrag)
                .addGap(18, 18, 18)
                .addComponent(streamCanvasDrag)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addContainerGap(211, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void streamNodeDragMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streamNodeDragMouseDragged
        // TODO add your handling code here:
        //try {
        //    CurrentCanvas.add(dragging_streamNode);
        //    //dragging_streamNode.setLocation(evt.getLocationOnScreen().x-CurrentCanvas.getLocationOnScreen().x,evt.getLocationOnScreen().y-CurrentCanvas.getLocationOnScreen().y);
        //    dragging_streamNode.setBounds(evt.getLocationOnScreen().x - CurrentCanvas.getLocationOnScreen().x, evt.getLocationOnScreen().y - CurrentCanvas.getLocationOnScreen().y, streamNodeDrag.getWidth(), streamNodeDrag.getHeight());
        //} catch (Exception ex) {
        //    System.out.println(ex.getMessage());
        //}
    }//GEN-LAST:event_streamNodeDragMouseDragged

    private void streamNodeDragMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streamNodeDragMouseReleased
        // TODO add your handling code here:
        //if (dragging_streamNode.getX() < CurrentCanvas.getWidth() && dragging_streamNode.getX() > 0 && dragging_streamNode.getY() < CurrentCanvas.getHeight() && dragging_streamNode.getY() > 0) {
        //    CurrentCanvas.add(new StreamNode(CurrentCanvas, dragging_streamNode.getLocation(), "StreamNode" + namingNumber));
        //    namingNumber = namingNumber + 1;
        //    CurrentCanvas.RegisterNodes();
        //    CurrentCanvas.refresh_canvas_bounds();
        //    //System.out.println("ADDED");
        //}
        //CurrentCanvas.remove(dragging_streamNode);
        //CurrentCanvas.repaint();
    }//GEN-LAST:event_streamNodeDragMouseReleased

    private void streamNodeDragMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streamNodeDragMousePressed
        // TODO add your handling code here:
        //dragging_streamNode = new javax.swing.JLabel();
        //dragging_streamNode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/main_box.png"))); // NOI18N
    }//GEN-LAST:event_streamNodeDragMousePressed

    private void streamCanvasDragMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streamCanvasDragMouseDragged
        // TODO add your handling code here:
        //try {
        //    CurrentCanvas.add(dragging_streamCanvas);
        //    //dragging_streamNode.setLocation(evt.getLocationOnScreen().x-CurrentCanvas.getLocationOnScreen().x,evt.getLocationOnScreen().y-CurrentCanvas.getLocationOnScreen().y);
        //    dragging_streamCanvas.setBounds(evt.getLocationOnScreen().x - CurrentCanvas.getLocationOnScreen().x, evt.getLocationOnScreen().y - CurrentCanvas.getLocationOnScreen().y, streamCanvasDrag.getWidth(), streamCanvasDrag.getHeight());
        //} catch (Exception ex) {
        //    System.out.println(ex.getMessage());
        //}
    }//GEN-LAST:event_streamCanvasDragMouseDragged

    private void streamCanvasDragMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streamCanvasDragMouseReleased
        // TODO add your handling code here:
        //if (dragging_streamCanvas.getX() < CurrentCanvas.getWidth() && dragging_streamCanvas.getX() > 0 && dragging_streamCanvas.getY() < CurrentCanvas.getHeight() && dragging_streamCanvas.getY() > 0) {
        //    CurrentCanvas.add(new StreamCanvas(CurrentCanvas, dragging_streamCanvas.getLocation(), "StreamCanvas" + namingNumber));
        //    namingNumber = namingNumber + 1;
        //    CurrentCanvas.RegisterNodes();
        //    CurrentCanvas.refresh_canvas_bounds();
        //    //System.out.println("ADDED");
        //}
        //CurrentCanvas.remove(dragging_streamCanvas);
        //CurrentCanvas.repaint();
    }//GEN-LAST:event_streamCanvasDragMouseReleased

    private void streamCanvasDragMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_streamCanvasDragMousePressed
        // TODO add your handling code here:
        //dragging_streamCanvas = new javax.swing.JLabel();
        //dragging_streamCanvas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/main_canvas.png"))); // NOI18N
    }//GEN-LAST:event_streamCanvasDragMousePressed

    private void jLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseDragged

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MousePressed

    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseReleased

    public void register_dragable(final JLabel dragable) {
        dragable.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mousePressed(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                dragging_shadow = new javax.swing.JLabel();
                dragging_shadow.setIcon(dragable.getIcon());
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                if (dragging_shadow.getX() < CurrentCanvas.getWidth() && dragging_shadow.getX() > 0 && dragging_shadow.getY() < CurrentCanvas.getHeight() && dragging_shadow.getY() > 0) {
                    switch (dragable.getName()) {
                        case "StreamCanvas":
                            CurrentCanvas.add(new StreamCanvas(CurrentCanvas, dragging_shadow.getLocation(), "StreamCanvas" + namingNumber));
                            break;
                        case "StreamNode":
                            CurrentCanvas.add(new StreamNode(CurrentCanvas, dragging_shadow.getLocation(), "StreamNode" + namingNumber));
                            break;
                        case "PlotHist":
                            CurrentCanvas.add(new PlotHist(CurrentCanvas, dragging_shadow.getLocation(), "StreamNode" + namingNumber));
                            break;
                    }

                    namingNumber = namingNumber + 1;
                    CurrentCanvas.RegisterNodes();
                    CurrentCanvas.refresh_canvas_bounds();
                    //System.out.println("ADDED");
                    if (CurrentCanvas.metaParent.my_view3d_thread != null) {
                        CurrentCanvas.metaParent.app.enqueue(new Callable() {
                            public Object call() throws Exception {
                                // call methods that modify the scene graph here
                                CurrentCanvas.view3d_data_generation();
                                CurrentCanvas.metaParent.app.getting_data(CurrentCanvas.objects_names, CurrentCanvas.objects_positions);
                                CurrentCanvas.metaParent.app.my_simpleInitApp();
                                return null;
                            }
                        });
                    }
                }
                CurrentCanvas.remove(dragging_shadow);
                CurrentCanvas.repaint();
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void mouseExited(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        dragable.addMouseMotionListener(new MouseMotionListener() {
            @Override
            public void mouseDragged(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                try {
                    CurrentCanvas.add(dragging_shadow);
                    //dragging_streamNode.setLocation(evt.getLocationOnScreen().x-CurrentCanvas.getLocationOnScreen().x,evt.getLocationOnScreen().y-CurrentCanvas.getLocationOnScreen().y);
                    dragging_shadow.setBounds(e.getLocationOnScreen().x - CurrentCanvas.getLocationOnScreen().x, e.getLocationOnScreen().y - CurrentCanvas.getLocationOnScreen().y, dragable.getWidth(), dragable.getHeight());
                } catch (Exception ex) {
                    System.out.println(ex.getMessage());
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel streamCanvasDrag;
    public javax.swing.JLabel streamNodeDrag;
    // End of variables declaration//GEN-END:variables
}
