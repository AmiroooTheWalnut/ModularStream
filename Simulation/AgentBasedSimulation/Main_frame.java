/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Simulation.AgentBasedSimulation;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author Amir72c
 */
public class Main_frame extends javax.swing.JFrame {

    int num_pixels = 600;
    Pixel all_pixels[];
    Timer refresh_timer;
    boolean init_states[];
    int num_columns = 30;
    int num_rows=20;
    boolean is_state_inialized = false;

    /**
     * Creates new form Main_frame
     */
    public Main_frame() {
        initComponents();
        my_initComponents();
    }

    public void my_initComponents() {
        all_pixels = new Pixel[num_pixels];
        init_states = new boolean[num_pixels];
        for (int i = 0; i < num_pixels; i++) {
            all_pixels[i] = new Pixel(this, i);
            Main_panel.add(all_pixels[i]);
        }
        Main_panel.setPreferredSize(new Dimension(num_columns * 11 + 10, (int) (Math.ceil(num_pixels / num_columns) * 11) + 10));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Main_panel = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        FPS = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        start = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        current_frame = new javax.swing.JLabel();
        init = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        reset_model = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Main_panel.setPreferredSize(new java.awt.Dimension(300, 300));

        javax.swing.GroupLayout Main_panelLayout = new javax.swing.GroupLayout(Main_panel);
        Main_panel.setLayout(Main_panelLayout);
        Main_panelLayout.setHorizontalGroup(
            Main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
        );
        Main_panelLayout.setVerticalGroup(
            Main_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(Main_panel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
        );

        jTextField1.setText("20");

        jLabel1.setText("Number of iterates:");

        FPS.setText("0.5");

        jLabel2.setText("Frame delay:");

        slider.setMaximum(20);
        slider.setMinimum(1);
        slider.setValue(1);
        slider.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sliderMouseClicked(evt);
            }
        });
        slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                sliderMouseDragged(evt);
            }
        });

        start.setText("Play");
        start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startActionPerformed(evt);
            }
        });

        jLabel3.setText("Current frame:");

        current_frame.setText("1");

        init.setText("Set as initial state");
        init.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initActionPerformed(evt);
            }
        });

        status.setText("Initial state!");

        jTextField2.setText("30");

        jLabel4.setText("Number of columns:");

        jLabel5.setText("Number of rows:");

        reset_model.setText("Reset");
        reset_model.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reset_modelActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(20), Integer.valueOf(1), null, Integer.valueOf(1)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(40, 40, 40)
                        .addComponent(current_frame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FPS, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(init))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(start)
                            .addComponent(status)
                            .addComponent(reset_model))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(FPS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(current_frame))
                        .addGap(18, 18, 18)
                        .addComponent(start)
                        .addGap(18, 18, 18)
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(status)
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset_model)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(init)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
        // TODO add your handling code here:

        if (start.isSelected()) {
            if (is_state_inialized == false) {
                for (int i = 0; i < num_pixels; i++) {
                    init_states[i] = all_pixels[i].is_alive;
                }
                is_state_inialized = true;
            } else {
                for (int i = 0; i < num_pixels; i++) {
                    all_pixels[i].is_alive = init_states[i];
                }
            }
            slider.setMaximum(Integer.parseInt(jTextField1.getText()));
            refresh_timer = new Timer((int) (Float.parseFloat(FPS.getText())*1000), new ActionListener() {
                int t = 0;

                @Override
                public void actionPerformed(ActionEvent e) {
                    //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                    t = t + 1;
                    refresh_screan();
                    Main_panel.repaint();
                    Main_panel.revalidate();
                    if (t > Integer.parseInt(jTextField1.getText())) {
                        refresh_timer.stop();
                        start.setSelected(false);
                        slider.setEnabled(true);
                        for (int i = 0; i < num_pixels; i++) {
                            all_pixels[i].is_alive = init_states[i];
                        }
                        t = 1;
                        status.setText("Initial state!");
                    }
                    current_frame.setText(String.valueOf(t));
                    slider.setValue(t);
                }
            });
            refresh_timer.start();
            slider.setEnabled(false);
            status.setText("Playing!");
        } else {
            refresh_timer.stop();
            slider.setEnabled(true);
            status.setText("Idle!");
        }
    }//GEN-LAST:event_startActionPerformed

    private void sliderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseClicked
        // TODO add your handling code here:
        if (is_state_inialized == false) {
            for (int i = 0; i < num_pixels; i++) {
                init_states[i] = all_pixels[i].is_alive;
            }
            is_state_inialized = true;
        } else {
            for (int i = 0; i < num_pixels; i++) {
                all_pixels[i].is_alive = init_states[i];
            }
        }
        int current_time = slider.getValue();
        for (int i = 1; i < current_time; i++) {
            refresh_screan();
        }
        Main_panel.repaint();
        Main_panel.revalidate();
        if (current_time == 1) {
            status.setText("Initial state!");
        } else {
            status.setText("Idle!");
        }
        current_frame.setText(String.valueOf(current_time));
    }//GEN-LAST:event_sliderMouseClicked

    private void sliderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseDragged
        // TODO add your handling code here:
        if (is_state_inialized == false) {
            for (int i = 0; i < num_pixels; i++) {
                init_states[i] = all_pixels[i].is_alive;
            }
            is_state_inialized = true;
        } else {
            for (int i = 0; i < num_pixels; i++) {
                all_pixels[i].is_alive = init_states[i];
            }
        }
        int current_time = slider.getValue();
        for (int i = 1; i < current_time; i++) {
            refresh_screan();
        }
        Main_panel.repaint();
        Main_panel.revalidate();
        if (current_time == 1) {
            status.setText("Initial state!");
        } else {
            status.setText("Idle!");
        }
        current_frame.setText(String.valueOf(current_time));
    }//GEN-LAST:event_sliderMouseDragged

    private void initActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < num_pixels; i++) {
            init_states[i] = all_pixels[i].is_alive;
        }
        is_state_inialized = true;
        slider.setValue(1);
        current_frame.setText(String.valueOf(1));
    }//GEN-LAST:event_initActionPerformed

    private void reset_modelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reset_modelActionPerformed
        // TODO add your handling code here:
        Main_panel.removeAll();
        num_columns=Integer.parseInt(jTextField2.getText());
        num_rows=(int)(jSpinner1.getValue());
        num_pixels=num_rows*num_columns;
        my_initComponents();
        Main_panel.repaint();
        Main_panel.revalidate();
    }//GEN-LAST:event_reset_modelActionPerformed

    public void refresh_screan() {
        //for (int t = 0; t < Integer.parseInt(jTextField1.getText()); t++) {
        for (int i = 0; i < all_pixels.length; i++) {
            if (all_pixels[i].x == 0 && all_pixels[i].y == 0) {
            }
            if (all_pixels[i].x == 0 && all_pixels[i].y == (int) (Math.floor(num_pixels / num_columns)) - 1) {
            }
            if (all_pixels[i].x == num_columns - 1 && all_pixels[i].y == (int) (Math.floor(num_pixels / num_columns)) - 1) {
            }
            if (all_pixels[i].x == num_columns - 1 && all_pixels[i].y == 0) {
            }
            if (all_pixels[i].x == 0 && all_pixels[i].y != 0 && all_pixels[i].y != (int) (Math.floor(num_pixels / num_columns)) - 1) {
            }
            if (all_pixels[i].x == num_columns - 1 && all_pixels[i].y != 0 && all_pixels[i].y != (int) (Math.floor(num_pixels / num_columns)) - 1) {
            }
            if (all_pixels[i].x != 0 && all_pixels[i].x != num_columns - 1 && all_pixels[i].y == 0) {
            }
            if (all_pixels[i].x != 0 && all_pixels[i].x != num_columns - 1 && all_pixels[i].y == (int) (Math.floor(num_pixels / num_columns)) - 1) {
            }
            if (all_pixels[i].x != 0 && all_pixels[i].x != num_columns - 1 && all_pixels[i].y != 0 && all_pixels[i].y != (int) (Math.floor(num_pixels / num_columns)) - 1) {
                int num_alive = 0;
                //upper_left
                if (all_pixels[i].my_order - num_columns - 1 > 0) {
                    int upper_left_x = all_pixels[all_pixels[i].my_order - num_columns - 1].y;
                    int upper_left_y = all_pixels[all_pixels[i].my_order - num_columns - 1].x;
                    if (all_pixels[all_pixels[i].my_order - num_columns - 1].is_alive == true) {
                        num_alive = num_alive + 1;
                    }
                }

                //upper
                if (all_pixels[i].my_order - num_columns > 0) {
                    int upper_x = all_pixels[all_pixels[i].my_order - num_columns].y;
                    int upper_y = all_pixels[all_pixels[i].my_order - num_columns].x;
                    if (all_pixels[all_pixels[i].my_order - num_columns].is_alive == true) {
                        num_alive = num_alive + 1;
                    }
                }

                //upper_right
                if (all_pixels[i].my_order - num_columns + 1 > 0) {
                    int upper_right_x = all_pixels[all_pixels[i].my_order - num_columns + 1].y;
                    int upper_right_y = all_pixels[all_pixels[i].my_order - num_columns + 1].x;
                    if (all_pixels[all_pixels[i].my_order - num_columns + 1].is_alive == true) {
                        num_alive = num_alive + 1;
                    }
                }

                //right
                if (all_pixels[i].my_order + 1 > 0) {
                    int right_x = all_pixels[all_pixels[i].my_order + 1].y;
                    int right_y = all_pixels[all_pixels[i].my_order + 1].x;
                    if (all_pixels[all_pixels[i].my_order + 1].is_alive == true) {
                        num_alive = num_alive + 1;
                    }
                }

                //under_right
                if (all_pixels[i].my_order + num_columns + 1 > 0) {
                    int under_right_x = all_pixels[all_pixels[i].my_order + num_columns + 1].y;
                    int under_right_y = all_pixels[all_pixels[i].my_order + num_columns + 1].x;
                    if (all_pixels[all_pixels[i].my_order + num_columns + 1].is_alive == true) {
                        num_alive = num_alive + 1;
                    }
                }

                //under
                if (all_pixels[i].my_order + num_columns > 0) {
                    int under_x = all_pixels[all_pixels[i].my_order + num_columns].y;
                    int under_y = all_pixels[all_pixels[i].my_order + num_columns].x;
                    if (all_pixels[all_pixels[i].my_order + num_columns].is_alive == true) {
                        num_alive = num_alive + 1;
                    }
                }

                //under_left
                if (all_pixels[i].my_order + num_columns - 1 > 0) {
                    int under_left_x = all_pixels[all_pixels[i].my_order + num_columns - 1].y;
                    int under_left_y = all_pixels[all_pixels[i].my_order + num_columns - 1].x;
                    if (all_pixels[all_pixels[i].my_order + num_columns - 1].is_alive == true) {
                        num_alive = num_alive + 1;
                    }
                }

                //left
                if (all_pixels[i].my_order - 1 > 0) {
                    int left_x = all_pixels[all_pixels[i].my_order - 1].y;
                    int left_y = all_pixels[all_pixels[i].my_order - 1].x;
                    if (all_pixels[all_pixels[i].my_order - 1].is_alive == true) {
                        num_alive = num_alive + 1;
                    }
                }
                if (all_pixels[i].is_alive == true) {
                    if (num_alive < 2) {
                        all_pixels[i].is_alive = false;
                    }
                    if (num_alive > 3) {
                        all_pixels[i].is_alive = false;
                    }
                } else {
                    if (num_alive == 3) {
                        all_pixels[i].is_alive = true;
                    }
                }

            }
        }

        //try {
        //    Thread.sleep(1000);
        //} catch (InterruptedException ex) {
        //    Logger.getLogger(Main_frame.class.getName()).log(Level.SEVERE, null, ex);
        //}
        //}
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_frame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FPS;
    private javax.swing.JPanel Main_panel;
    private javax.swing.JLabel current_frame;
    private javax.swing.JButton init;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton reset_model;
    public javax.swing.JSlider slider;
    private javax.swing.JToggleButton start;
    public javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables
}
